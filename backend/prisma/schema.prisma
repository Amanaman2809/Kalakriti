// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String    @unique
  password      String? // nullable for OAuth
  oauthId       String? // e.g. Google sub
  oauthProvider String? // 'google', 'github', etc.
  otp           String?
  otpExpiresAt  DateTime?

  isVerified Boolean @default(false)

  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  orders    Order[]
  wishlist  WishlistItem[]
  cartItems CartItem[]
  Feedback  Feedback[]
}

model Address {
  id         String       @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  postalCode String
  phone      String
  isDefault  Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt


  userId String
  user   User    @relation(fields: [userId], references: [id])
  orders Order[] @relation("OrderAddress")

  @@index([userId])
  @@index([isDefault])
  @@index([userId, isDefault])
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Int      @db.SmallInt // 1 to 5
  comment   String? // optional review text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // 1 review per user per product
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  tags        String[]
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  wishlistItems WishlistItem[]
  orderItems    OrderItem[]
  CartItem      CartItem[]
  Feedback      Feedback[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  image    String?
  products Product[]
}

model WishlistItem {
  id        String @id @default(uuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // one product once per wishlist
}

enum PaymentMode {
  COD
  ONLINE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PLACED
  SHIPPED
  DELIVERED
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  paymentMode   PaymentMode
  paymentStatus PaymentStatus
  status        OrderStatus
  total         Float
  addressId     String // Reference to Address
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  shippedAt         DateTime?
  deliveredAt       DateTime?
  estimatedDelivery DateTime?
  carrierName       String?
  trackingNumber    String?
  statusUpdatedAt   DateTime    @default(now())
  
  user              User        @relation(fields: [userId], references: [id])
  address           Address     @relation("OrderAddress", fields: [addressId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String @id @default(uuid())
  userId    String
  productId String
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
